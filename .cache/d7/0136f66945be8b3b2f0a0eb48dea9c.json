{"id":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","dependencies":[{"name":"C:\\Users\\matte\\Documents\\SKR\\package.json","includedInParent":true,"mtime":1638722727563},{"name":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-webrtc-star\\package.json","includedInParent":true,"mtime":1638722718033},{"name":"abortable-iterator","loc":{"line":3,"column":26},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-webrtc-star\\src\\socket-to-conn.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\abortable-iterator\\index.js"},{"name":"stream-to-it","loc":{"line":4,"column":27},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-webrtc-star\\src\\socket-to-conn.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\stream-to-it\\index.js"},{"name":"./constants","loc":{"line":5,"column":34},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-webrtc-star\\src\\socket-to-conn.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-webrtc-star\\src\\constants.js"},{"name":"libp2p-utils/src/ip-port-to-multiaddr","loc":{"line":6,"column":28},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-webrtc-star\\src\\socket-to-conn.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-utils\\src\\ip-port-to-multiaddr.js"},{"name":"debug","loc":{"line":8,"column":22},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-webrtc-star\\src\\socket-to-conn.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\debug\\src\\browser.js"}],"generated":{"js":"'use strict'\n\nconst abortable = require('abortable-iterator')\nconst toIterable = require('stream-to-it')\nconst { CLOSE_TIMEOUT } = require('./constants')\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr')\n\nconst debug = require('debug')\nconst log = debug('libp2p:webrtc-star:socket')\nlog.error = debug('libp2p:webrtc-star:socket:error')\n\nconst toWebrtcMultiaddr = (address, port) => {\n  if (!address || !port) return undefined\n\n  try {\n    return toMultiaddr(address, port)\n  } catch (err) {\n    log.error(err)\n    // Account for mdns hostnames, just make it a local ip for now\n    return toMultiaddr('0.0.0.0', port)\n  }\n}\n\n// Convert a socket into a MultiaddrConnection\n// https://github.com/libp2p/js-libp2p-interfaces/tree/master/src/transport#multiaddrconnection\nmodule.exports = (socket, options = {}) => {\n  const { sink, source } = toIterable.duplex(socket)\n\n  // If the remote address was passed, use it - it may have the peer ID encapsulated\n  const remoteAddr = options.remoteAddr || toWebrtcMultiaddr(socket.remoteAddress, socket.remotePort)\n  const localAddr = toWebrtcMultiaddr(socket.localAddress, socket.localPort)\n\n  const maConn = {\n    async sink (source) {\n      if (options.signal) {\n        source = abortable(source, options.signal)\n      }\n\n      try {\n        await sink((async function * () {\n          for await (const chunk of source) {\n            // Convert BufferList to Buffer\n            yield chunk instanceof Uint8Array ? chunk : chunk.slice()\n          }\n        })())\n      } catch (err) {\n        // If aborted we can safely ignore\n        if (err.type !== 'aborted') {\n          // If the source errored the socket will already have been destroyed by\n          // toIterable.duplex(). If the socket errored it will already be\n          // destroyed. There's nothing to do here except log the error & return.\n          log.error(err)\n        }\n      }\n    },\n\n    source: options.signal ? abortable(source, options.signal) : source,\n\n    conn: socket,\n\n    localAddr,\n    remoteAddr,\n\n    timeline: { open: Date.now() },\n\n    close () {\n      if (socket.destroyed) return\n\n      return new Promise((resolve, reject) => {\n        const start = Date.now()\n\n        // Attempt to end the socket. If it takes longer to close than the\n        // timeout, destroy it manually.\n        const timeout = setTimeout(() => {\n          if (maConn.remoteAddr) {\n            const { host, port } = maConn.remoteAddr.toOptions()\n            log('timeout closing socket to %s:%s after %dms, destroying it manually',\n              host, port, Date.now() - start)\n          }\n\n          if (!socket.destroyed) {\n            socket.destroy()\n          }\n        }, CLOSE_TIMEOUT)\n\n        socket.once('close', () => {\n          resolve()\n        })\n\n        socket.end(err => {\n          clearTimeout(timeout)\n\n          maConn.timeline.close = Date.now()\n          if (err) return reject(err)\n        })\n      })\n    }\n  }\n\n  socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now()\n    }\n  })\n\n  return maConn\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}}],"sources":{"../node_modules/libp2p-webrtc-star/src/socket-to-conn.js":"'use strict'\n\nconst abortable = require('abortable-iterator')\nconst toIterable = require('stream-to-it')\nconst { CLOSE_TIMEOUT } = require('./constants')\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr')\n\nconst debug = require('debug')\nconst log = debug('libp2p:webrtc-star:socket')\nlog.error = debug('libp2p:webrtc-star:socket:error')\n\nconst toWebrtcMultiaddr = (address, port) => {\n  if (!address || !port) return undefined\n\n  try {\n    return toMultiaddr(address, port)\n  } catch (err) {\n    log.error(err)\n    // Account for mdns hostnames, just make it a local ip for now\n    return toMultiaddr('0.0.0.0', port)\n  }\n}\n\n// Convert a socket into a MultiaddrConnection\n// https://github.com/libp2p/js-libp2p-interfaces/tree/master/src/transport#multiaddrconnection\nmodule.exports = (socket, options = {}) => {\n  const { sink, source } = toIterable.duplex(socket)\n\n  // If the remote address was passed, use it - it may have the peer ID encapsulated\n  const remoteAddr = options.remoteAddr || toWebrtcMultiaddr(socket.remoteAddress, socket.remotePort)\n  const localAddr = toWebrtcMultiaddr(socket.localAddress, socket.localPort)\n\n  const maConn = {\n    async sink (source) {\n      if (options.signal) {\n        source = abortable(source, options.signal)\n      }\n\n      try {\n        await sink((async function * () {\n          for await (const chunk of source) {\n            // Convert BufferList to Buffer\n            yield chunk instanceof Uint8Array ? chunk : chunk.slice()\n          }\n        })())\n      } catch (err) {\n        // If aborted we can safely ignore\n        if (err.type !== 'aborted') {\n          // If the source errored the socket will already have been destroyed by\n          // toIterable.duplex(). If the socket errored it will already be\n          // destroyed. There's nothing to do here except log the error & return.\n          log.error(err)\n        }\n      }\n    },\n\n    source: options.signal ? abortable(source, options.signal) : source,\n\n    conn: socket,\n\n    localAddr,\n    remoteAddr,\n\n    timeline: { open: Date.now() },\n\n    close () {\n      if (socket.destroyed) return\n\n      return new Promise((resolve, reject) => {\n        const start = Date.now()\n\n        // Attempt to end the socket. If it takes longer to close than the\n        // timeout, destroy it manually.\n        const timeout = setTimeout(() => {\n          if (maConn.remoteAddr) {\n            const { host, port } = maConn.remoteAddr.toOptions()\n            log('timeout closing socket to %s:%s after %dms, destroying it manually',\n              host, port, Date.now() - start)\n          }\n\n          if (!socket.destroyed) {\n            socket.destroy()\n          }\n        }, CLOSE_TIMEOUT)\n\n        socket.once('close', () => {\n          resolve()\n        })\n\n        socket.end(err => {\n          clearTimeout(timeout)\n\n          maConn.timeline.close = Date.now()\n          if (err) return reject(err)\n        })\n      })\n    }\n  }\n\n  socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now()\n    }\n  })\n\n  return maConn\n}\n"},"lineCount":111}},"error":null,"hash":"edf58647e4658c6b4920561ef20de5b7","cacheData":{"env":{}}}