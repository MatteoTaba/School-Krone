{"id":"../node_modules/libp2p-crypto/src/keys/exporter.js","dependencies":[{"name":"C:\\Users\\matte\\Documents\\SKR\\package.json","includedInParent":true,"mtime":1638722727563},{"name":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-crypto\\package.json","includedInParent":true,"mtime":1638722719138},{"name":"multiformats/bases/base64","loc":{"line":3,"column":27},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-crypto\\src\\keys\\exporter.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\multiformats\\cjs\\src\\bases\\base64.js"},{"name":"../ciphers/aes-gcm","loc":{"line":4,"column":24},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-crypto\\src\\keys\\exporter.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-crypto\\src\\ciphers\\aes-gcm.browser.js"}],"generated":{"js":"'use strict';\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar _require = require('multiformats/bases/base64'),\n    base64 = _require.base64;\n\nvar ciphers = require('../ciphers/aes-gcm');\n\nmodule.exports = {\n  /**\n   * Exports the given PrivateKey as a base64 encoded string.\n   * The PrivateKey is encrypted via a password derived PBKDF2 key\n   * leveraging the aes-gcm cipher algorithm.\n   *\n   * @param {Uint8Array} privateKey - The PrivateKey protobuf\n   * @param {string} password\n   * @returns {Promise<string>} A base64 encoded string\n   */\n  export: function () {\n    var _export2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(privateKey, password) {\n      var cipher, encryptedKey;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              cipher = ciphers.create();\n              _context.next = 3;\n              return cipher.encrypt(privateKey, password);\n\n            case 3:\n              encryptedKey = _context.sent;\n              return _context.abrupt(\"return\", base64.encode(encryptedKey));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function _export(_x, _x2) {\n      return _export2.apply(this, arguments);\n    }\n\n    return _export;\n  }()\n};"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":1,"column":0}},{"generated":{"line":7,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":3,"column":0}},{"name":"require","generated":{"line":7,"column":15},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":3,"column":19}},{"generated":{"line":7,"column":22},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":3,"column":26}},{"generated":{"line":7,"column":23},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":3,"column":27}},{"generated":{"line":7,"column":50},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":3,"column":26}},{"generated":{"line":7,"column":51},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":3,"column":0}},{"generated":{"line":8,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":3,"column":0}},{"name":"base64","generated":{"line":8,"column":4},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":3,"column":8}},{"generated":{"line":8,"column":10},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":3,"column":0}},{"name":"base64","generated":{"line":8,"column":22},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":3,"column":8}},{"generated":{"line":8,"column":28},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":4,"column":0}},{"name":"ciphers","generated":{"line":10,"column":4},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":4,"column":6}},{"generated":{"line":10,"column":11},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":4,"column":13}},{"name":"require","generated":{"line":10,"column":14},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":4,"column":16}},{"generated":{"line":10,"column":21},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":4,"column":23}},{"generated":{"line":10,"column":22},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":4,"column":24}},{"generated":{"line":10,"column":42},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":4,"column":23}},{"generated":{"line":10,"column":43},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":4,"column":0}},{"name":"module","generated":{"line":12,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":6,"column":0}},{"generated":{"line":12,"column":6},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":6,"column":6}},{"name":"exports","generated":{"line":12,"column":7},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":6,"column":7}},{"generated":{"line":12,"column":14},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":6,"column":0}},{"generated":{"line":12,"column":17},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":6,"column":17}},{"generated":{"line":13,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":7,"column":2}},{"generated":{"line":14,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":8,"column":0}},{"generated":{"line":15,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":9,"column":0}},{"generated":{"line":16,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":10,"column":0}},{"generated":{"line":17,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":11,"column":0}},{"generated":{"line":18,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":12,"column":0}},{"generated":{"line":19,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":13,"column":0}},{"generated":{"line":20,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":14,"column":0}},{"generated":{"line":21,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":15,"column":0}},{"name":"export","generated":{"line":22,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":2}},{"name":"export","generated":{"line":22,"column":2},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":2}},{"generated":{"line":22,"column":8},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":8}},{"generated":{"line":23,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":8}},{"generated":{"line":23,"column":75},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"name":"privateKey","generated":{"line":23,"column":92},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":26}},{"generated":{"line":23,"column":102},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"name":"password","generated":{"line":23,"column":104},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":38}},{"generated":{"line":23,"column":112},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":24,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":25,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":26,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":27,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":28,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"name":"cipher","generated":{"line":29,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":17,"column":10}},{"name":"cipher","generated":{"line":29,"column":14},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":17,"column":10}},{"generated":{"line":29,"column":20},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"name":"ciphers","generated":{"line":29,"column":23},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":17,"column":19}},{"generated":{"line":29,"column":30},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":17,"column":26}},{"name":"create","generated":{"line":29,"column":31},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":17,"column":27}},{"generated":{"line":29,"column":37},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":17,"column":19}},{"generated":{"line":29,"column":39},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":30,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":31,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"name":"cipher","generated":{"line":31,"column":21},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":18,"column":31}},{"generated":{"line":31,"column":27},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":18,"column":37}},{"name":"encrypt","generated":{"line":31,"column":28},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":18,"column":38}},{"generated":{"line":31,"column":35},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":18,"column":31}},{"name":"privateKey","generated":{"line":31,"column":36},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":18,"column":46}},{"generated":{"line":31,"column":46},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":18,"column":31}},{"name":"password","generated":{"line":31,"column":48},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":18,"column":58}},{"generated":{"line":31,"column":56},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":18,"column":31}},{"generated":{"line":31,"column":57},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":33,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"name":"encryptedKey","generated":{"line":34,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":18,"column":10}},{"name":"encryptedKey","generated":{"line":34,"column":14},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":18,"column":10}},{"generated":{"line":34,"column":26},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":35,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"name":"base64","generated":{"line":35,"column":47},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":19,"column":11}},{"generated":{"line":35,"column":53},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":19,"column":17}},{"name":"encode","generated":{"line":35,"column":54},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":19,"column":18}},{"generated":{"line":35,"column":60},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":19,"column":11}},{"name":"encryptedKey","generated":{"line":35,"column":61},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":19,"column":25}},{"generated":{"line":35,"column":73},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":19,"column":11}},{"generated":{"line":35,"column":74},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":37,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":38,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":39,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":40,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":41,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":42,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":43,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":10}},{"generated":{"line":43,"column":5},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":8}},{"generated":{"line":45,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":8}},{"generated":{"line":46,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":8}},{"generated":{"line":47,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":8}},{"generated":{"line":49,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":8}},{"generated":{"line":50,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":16,"column":8}},{"generated":{"line":51,"column":0},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":6,"column":17}},{"generated":{"line":51,"column":1},"source":"../node_modules/libp2p-crypto/src/keys/exporter.js","original":{"line":6,"column":0}}],"sources":{"../node_modules/libp2p-crypto/src/keys/exporter.js":"'use strict'\n\nconst { base64 } = require('multiformats/bases/base64')\nconst ciphers = require('../ciphers/aes-gcm')\n\nmodule.exports = {\n  /**\n   * Exports the given PrivateKey as a base64 encoded string.\n   * The PrivateKey is encrypted via a password derived PBKDF2 key\n   * leveraging the aes-gcm cipher algorithm.\n   *\n   * @param {Uint8Array} privateKey - The PrivateKey protobuf\n   * @param {string} password\n   * @returns {Promise<string>} A base64 encoded string\n   */\n  export: async function (privateKey, password) {\n    const cipher = ciphers.create()\n    const encryptedKey = await cipher.encrypt(privateKey, password)\n    return base64.encode(encryptedKey)\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"41aa6d758c14c07c7d51c0b25f7c9c73","cacheData":{"env":{}}}