{"id":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","dependencies":[{"name":"C:\\Users\\matte\\Documents\\SKR\\package.json","includedInParent":true,"mtime":1638722727563},{"name":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\package.json","includedInParent":true,"mtime":1638722721198},{"name":"ipfs-core-config/config","loc":{"line":5,"column":31},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\bootstrap\\reset.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core-config\\cjs\\src\\config.browser.js"},{"name":"ipfs-core-utils/with-timeout-option","loc":{"line":6,"column":32},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\bootstrap\\reset.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core-utils\\cjs\\src\\with-timeout-option.js"},{"name":"multiaddr","loc":{"line":7,"column":24},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\bootstrap\\reset.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\multiaddr\\src\\index.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar getDefaultConfig = require('ipfs-core-config/config');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\nvar multiaddr = require('multiaddr');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar getDefaultConfig__default = /*#__PURE__*/_interopDefaultLegacy(getDefaultConfig);\n\nfunction createReset({repo}) {\n  async function reset(options = {}) {\n    const config = await repo.config.getAll(options);\n    config.Bootstrap = getDefaultConfig__default[\"default\"]().Bootstrap;\n    await repo.config.replace(config);\n    return { Peers: getDefaultConfig__default[\"default\"]().Bootstrap.map(ma => new multiaddr.Multiaddr(ma)) };\n  }\n  return withTimeoutOption.withTimeoutOption(reset);\n}\n\nexports.createReset = createReset;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}}],"sources":{"../node_modules/ipfs-core/cjs/src/components/bootstrap/reset.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar getDefaultConfig = require('ipfs-core-config/config');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\nvar multiaddr = require('multiaddr');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar getDefaultConfig__default = /*#__PURE__*/_interopDefaultLegacy(getDefaultConfig);\n\nfunction createReset({repo}) {\n  async function reset(options = {}) {\n    const config = await repo.config.getAll(options);\n    config.Bootstrap = getDefaultConfig__default[\"default\"]().Bootstrap;\n    await repo.config.replace(config);\n    return { Peers: getDefaultConfig__default[\"default\"]().Bootstrap.map(ma => new multiaddr.Multiaddr(ma)) };\n  }\n  return withTimeoutOption.withTimeoutOption(reset);\n}\n\nexports.createReset = createReset;\n"},"lineCount":24}},"error":null,"hash":"0f72b487db962e49a1bfdeb60e0a1dc0","cacheData":{"env":{}}}