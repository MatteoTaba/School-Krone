{"id":"../node_modules/ipfs-repo/cjs/src/gc.js","dependencies":[{"name":"C:\\Users\\matte\\Documents\\SKR\\package.json","includedInParent":true,"mtime":1638722727563},{"name":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\package.json","includedInParent":true,"mtime":1638722720622},{"name":"multiformats/cid","loc":{"line":5,"column":18},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\gc.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\multiformats\\cjs\\src\\cid.js"},{"name":"debug","loc":{"line":6,"column":20},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\gc.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\debug\\src\\browser.js"},{"name":"datastore-core/errors","loc":{"line":7,"column":21},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\gc.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\datastore-core\\cjs\\src\\errors.js"},{"name":"it-parallel-batch","loc":{"line":8,"column":28},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\gc.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\it-parallel-batch\\index.js"},{"name":"it-pipe","loc":{"line":9,"column":21},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\gc.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\it-pipe\\index.js"},{"name":"it-merge","loc":{"line":10,"column":20},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\gc.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\it-merge\\index.js"},{"name":"it-map","loc":{"line":11,"column":18},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\gc.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\it-map\\index.js"},{"name":"it-filter","loc":{"line":12,"column":21},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\gc.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\it-filter\\index.js"},{"name":"interface-datastore/key","loc":{"line":13,"column":18},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\gc.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\interface-datastore\\cjs\\src\\key.js"},{"name":"multiformats/bases/base32","loc":{"line":14,"column":21},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\gc.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\multiformats\\cjs\\src\\bases\\base32.js"},{"name":"./utils/walk-dag.js","loc":{"line":15,"column":22},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\gc.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\utils\\walk-dag.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar debug = require('debug');\nvar errors = require('datastore-core/errors');\nvar parallelBatch = require('it-parallel-batch');\nvar itPipe = require('it-pipe');\nvar merge = require('it-merge');\nvar map = require('it-map');\nvar filter = require('it-filter');\nvar key = require('interface-datastore/key');\nvar base32 = require('multiformats/bases/base32');\nvar walkDag = require('./utils/walk-dag.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar parallelBatch__default = /*#__PURE__*/_interopDefaultLegacy(parallelBatch);\nvar merge__default = /*#__PURE__*/_interopDefaultLegacy(merge);\nvar map__default = /*#__PURE__*/_interopDefaultLegacy(map);\nvar filter__default = /*#__PURE__*/_interopDefaultLegacy(filter);\n\nconst log = debug__default[\"default\"]('ipfs:repo:gc');\nconst ERR_NOT_FOUND = errors.notFoundError().code;\nconst BLOCK_RM_CONCURRENCY = 256;\nconst MFS_ROOT_KEY = new key.Key('/local/filesroot');\nfunction gc({gcLock, pins, blockstore, root, loadCodec}) {\n  async function* gc() {\n    const start = Date.now();\n    log('Creating set of marked blocks');\n    const release = await gcLock.writeLock();\n    try {\n      const markedSet = await createMarkedSet({\n        pins,\n        blockstore,\n        root,\n        loadCodec\n      });\n      const blockKeys = blockstore.queryKeys({});\n      yield* deleteUnmarkedBlocks({ blockstore }, markedSet, blockKeys);\n      log(`Complete (${ Date.now() - start }ms)`);\n    } finally {\n      release();\n    }\n  }\n  return gc;\n}\nasync function createMarkedSet({pins, blockstore, loadCodec, root}) {\n  const mfsSource = async function* () {\n    let mh;\n    try {\n      mh = await root.get(MFS_ROOT_KEY);\n    } catch (err) {\n      if (err.code === ERR_NOT_FOUND) {\n        log('No blocks in MFS');\n        return;\n      }\n      throw err;\n    }\n    const rootCid = cid.CID.decode(mh);\n    yield rootCid;\n    yield* walkDag.walkDag(rootCid, blockstore, loadCodec);\n  }();\n  const pinsSource = merge__default[\"default\"](map__default[\"default\"](pins.recursiveKeys(), ({cid}) => cid), pins.indirectKeys(), map__default[\"default\"](pins.directKeys(), ({cid}) => cid), mfsSource);\n  const output = new Set();\n  for await (const cid of merge__default[\"default\"](pinsSource, mfsSource)) {\n    output.add(base32.base32.encode(cid.multihash.bytes));\n  }\n  return output;\n}\nasync function* deleteUnmarkedBlocks({blockstore}, markedSet, blockKeys) {\n  let blocksCount = 0;\n  let removedBlocksCount = 0;\n  const removeBlock = async cid => {\n    return async function remove() {\n      blocksCount++;\n      try {\n        const b32 = base32.base32.encode(cid.multihash.bytes);\n        if (markedSet.has(b32)) {\n          return null;\n        }\n        try {\n          await blockstore.delete(cid);\n          removedBlocksCount++;\n        } catch (err) {\n          return { err: new Error(`Could not delete block with CID ${ cid }: ${ err.message }`) };\n        }\n        return { cid };\n      } catch (err) {\n        const msg = `Could delete block with CID ${ cid }`;\n        log(msg, err);\n        return { err: new Error(msg + `: ${ err.message }`) };\n      }\n    };\n  };\n  yield* itPipe.pipe(parallelBatch__default[\"default\"](map__default[\"default\"](blockKeys, removeBlock), BLOCK_RM_CONCURRENCY), source => filter__default[\"default\"](source, Boolean));\n  log(`Marked set has ${ markedSet.size } unique blocks. Blockstore has ${ blocksCount } blocks. ` + `Deleted ${ removedBlocksCount } blocks.`);\n}\n\nexports.gc = gc;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/gc.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}}],"sources":{"../node_modules/ipfs-repo/cjs/src/gc.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar debug = require('debug');\nvar errors = require('datastore-core/errors');\nvar parallelBatch = require('it-parallel-batch');\nvar itPipe = require('it-pipe');\nvar merge = require('it-merge');\nvar map = require('it-map');\nvar filter = require('it-filter');\nvar key = require('interface-datastore/key');\nvar base32 = require('multiformats/bases/base32');\nvar walkDag = require('./utils/walk-dag.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar parallelBatch__default = /*#__PURE__*/_interopDefaultLegacy(parallelBatch);\nvar merge__default = /*#__PURE__*/_interopDefaultLegacy(merge);\nvar map__default = /*#__PURE__*/_interopDefaultLegacy(map);\nvar filter__default = /*#__PURE__*/_interopDefaultLegacy(filter);\n\nconst log = debug__default[\"default\"]('ipfs:repo:gc');\nconst ERR_NOT_FOUND = errors.notFoundError().code;\nconst BLOCK_RM_CONCURRENCY = 256;\nconst MFS_ROOT_KEY = new key.Key('/local/filesroot');\nfunction gc({gcLock, pins, blockstore, root, loadCodec}) {\n  async function* gc() {\n    const start = Date.now();\n    log('Creating set of marked blocks');\n    const release = await gcLock.writeLock();\n    try {\n      const markedSet = await createMarkedSet({\n        pins,\n        blockstore,\n        root,\n        loadCodec\n      });\n      const blockKeys = blockstore.queryKeys({});\n      yield* deleteUnmarkedBlocks({ blockstore }, markedSet, blockKeys);\n      log(`Complete (${ Date.now() - start }ms)`);\n    } finally {\n      release();\n    }\n  }\n  return gc;\n}\nasync function createMarkedSet({pins, blockstore, loadCodec, root}) {\n  const mfsSource = async function* () {\n    let mh;\n    try {\n      mh = await root.get(MFS_ROOT_KEY);\n    } catch (err) {\n      if (err.code === ERR_NOT_FOUND) {\n        log('No blocks in MFS');\n        return;\n      }\n      throw err;\n    }\n    const rootCid = cid.CID.decode(mh);\n    yield rootCid;\n    yield* walkDag.walkDag(rootCid, blockstore, loadCodec);\n  }();\n  const pinsSource = merge__default[\"default\"](map__default[\"default\"](pins.recursiveKeys(), ({cid}) => cid), pins.indirectKeys(), map__default[\"default\"](pins.directKeys(), ({cid}) => cid), mfsSource);\n  const output = new Set();\n  for await (const cid of merge__default[\"default\"](pinsSource, mfsSource)) {\n    output.add(base32.base32.encode(cid.multihash.bytes));\n  }\n  return output;\n}\nasync function* deleteUnmarkedBlocks({blockstore}, markedSet, blockKeys) {\n  let blocksCount = 0;\n  let removedBlocksCount = 0;\n  const removeBlock = async cid => {\n    return async function remove() {\n      blocksCount++;\n      try {\n        const b32 = base32.base32.encode(cid.multihash.bytes);\n        if (markedSet.has(b32)) {\n          return null;\n        }\n        try {\n          await blockstore.delete(cid);\n          removedBlocksCount++;\n        } catch (err) {\n          return { err: new Error(`Could not delete block with CID ${ cid }: ${ err.message }`) };\n        }\n        return { cid };\n      } catch (err) {\n        const msg = `Could delete block with CID ${ cid }`;\n        log(msg, err);\n        return { err: new Error(msg + `: ${ err.message }`) };\n      }\n    };\n  };\n  yield* itPipe.pipe(parallelBatch__default[\"default\"](map__default[\"default\"](blockKeys, removeBlock), BLOCK_RM_CONCURRENCY), source => filter__default[\"default\"](source, Boolean));\n  log(`Marked set has ${ markedSet.size } unique blocks. Blockstore has ${ blocksCount } blocks. ` + `Deleted ${ removedBlocksCount } blocks.`);\n}\n\nexports.gc = gc;\n"},"lineCount":103}},"error":null,"hash":"27d2563a538ccffd81c27a3024ea6029","cacheData":{"env":{}}}