{"id":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","dependencies":[{"name":"C:\\Users\\matte\\Documents\\SKR\\package.json","includedInParent":true,"mtime":1638722727563},{"name":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\package.json","includedInParent":true,"mtime":1638722721198},{"name":"ipns","loc":{"line":5,"column":19},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\ipns\\resolver.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipns\\cjs\\src\\index.js"},{"name":"peer-id","loc":{"line":6,"column":21},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\ipns\\resolver.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\peer-id\\src\\index.js"},{"name":"err-code","loc":{"line":7,"column":22},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\ipns\\resolver.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\err-code\\index.js"},{"name":"debug","loc":{"line":8,"column":20},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\ipns\\resolver.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\debug\\src\\browser.js"},{"name":"uint8arrays/to-string","loc":{"line":9,"column":23},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\ipns\\resolver.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\uint8arrays\\cjs\\src\\to-string.js"},{"name":"datastore-core/errors","loc":{"line":10,"column":21},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\ipns\\resolver.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\datastore-core\\cjs\\src\\errors.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ipns = require('ipns');\nvar PeerId = require('peer-id');\nvar errCode = require('err-code');\nvar debug = require('debug');\nvar toString = require('uint8arrays/to-string');\nvar Errors = require('datastore-core/errors');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar ipns__namespace = /*#__PURE__*/_interopNamespace(ipns);\nvar PeerId__default = /*#__PURE__*/_interopDefaultLegacy(PeerId);\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar Errors__namespace = /*#__PURE__*/_interopNamespace(Errors);\n\nconst log = Object.assign(debug__default[\"default\"]('ipfs:ipns:resolver'), { error: debug__default[\"default\"]('ipfs:ipns:resolver:error') });\nconst ERR_NOT_FOUND = Errors__namespace.notFoundError().code;\nconst defaultMaximumRecursiveDepth = 32;\nclass IpnsResolver {\n  constructor(routing) {\n    this._routing = routing;\n  }\n  async resolve(name, options = {}) {\n    if (typeof name !== 'string') {\n      throw errCode__default[\"default\"](new Error('invalid name'), 'ERR_INVALID_NAME');\n    }\n    const recursive = options.recursive && options.recursive.toString() === 'true';\n    const nameSegments = name.split('/');\n    if (nameSegments.length !== 3 || nameSegments[0] !== '') {\n      throw errCode__default[\"default\"](new Error('invalid name'), 'ERR_INVALID_NAME');\n    }\n    const key = nameSegments[2];\n    let depth = Infinity;\n    if (recursive) {\n      depth = defaultMaximumRecursiveDepth;\n    }\n    const res = await this.resolver(key, depth);\n    log(`${ name } was locally resolved correctly`);\n    return res;\n  }\n  async resolver(name, depth) {\n    if (depth === 0) {\n      const errMsg = `could not resolve name (recursion limit of ${ defaultMaximumRecursiveDepth } exceeded)`;\n      log.error(errMsg);\n      throw errCode__default[\"default\"](new Error(errMsg), 'ERR_RESOLVE_RECURSION_LIMIT');\n    }\n    const res = await this._resolveName(name);\n    const nameSegments = res.split('/');\n    if (nameSegments[1] === 'ipfs' || !depth) {\n      return res;\n    }\n    return this.resolver(nameSegments[2], depth - 1);\n  }\n  async _resolveName(name) {\n    const peerId = PeerId__default[\"default\"].parse(name);\n    const {routingKey} = ipns__namespace.getIdKeys(peerId.toBytes());\n    let record;\n    try {\n      record = await this._routing.get(routingKey.uint8Array());\n    } catch (err) {\n      log.error('could not get record from routing', err);\n      if (err.code === ERR_NOT_FOUND) {\n        throw errCode__default[\"default\"](new Error(`record requested for ${ name } was not found in the network`), 'ERR_NO_RECORD_FOUND');\n      }\n      throw errCode__default[\"default\"](new Error(`unexpected error getting the ipns record ${ peerId.toString() }`), 'ERR_UNEXPECTED_ERROR_GETTING_RECORD');\n    }\n    let ipnsEntry;\n    try {\n      ipnsEntry = ipns__namespace.unmarshal(record);\n    } catch (err) {\n      log.error('could not unmarshal record', err);\n      throw errCode__default[\"default\"](new Error('found ipns record that we couldn\\'t convert to a value'), 'ERR_INVALID_RECORD_RECEIVED');\n    }\n    return this._validateRecord(peerId, ipnsEntry);\n  }\n  async _validateRecord(peerId, ipnsEntry) {\n    const pubKey = await ipns__namespace.extractPublicKey(peerId, ipnsEntry);\n    await ipns__namespace.validate(pubKey, ipnsEntry);\n    return toString.toString(ipnsEntry.value);\n  }\n}\n\nexports.IpnsResolver = IpnsResolver;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/ipns/resolver.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}}],"sources":{"../node_modules/ipfs-core/cjs/src/ipns/resolver.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ipns = require('ipns');\nvar PeerId = require('peer-id');\nvar errCode = require('err-code');\nvar debug = require('debug');\nvar toString = require('uint8arrays/to-string');\nvar Errors = require('datastore-core/errors');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar ipns__namespace = /*#__PURE__*/_interopNamespace(ipns);\nvar PeerId__default = /*#__PURE__*/_interopDefaultLegacy(PeerId);\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar Errors__namespace = /*#__PURE__*/_interopNamespace(Errors);\n\nconst log = Object.assign(debug__default[\"default\"]('ipfs:ipns:resolver'), { error: debug__default[\"default\"]('ipfs:ipns:resolver:error') });\nconst ERR_NOT_FOUND = Errors__namespace.notFoundError().code;\nconst defaultMaximumRecursiveDepth = 32;\nclass IpnsResolver {\n  constructor(routing) {\n    this._routing = routing;\n  }\n  async resolve(name, options = {}) {\n    if (typeof name !== 'string') {\n      throw errCode__default[\"default\"](new Error('invalid name'), 'ERR_INVALID_NAME');\n    }\n    const recursive = options.recursive && options.recursive.toString() === 'true';\n    const nameSegments = name.split('/');\n    if (nameSegments.length !== 3 || nameSegments[0] !== '') {\n      throw errCode__default[\"default\"](new Error('invalid name'), 'ERR_INVALID_NAME');\n    }\n    const key = nameSegments[2];\n    let depth = Infinity;\n    if (recursive) {\n      depth = defaultMaximumRecursiveDepth;\n    }\n    const res = await this.resolver(key, depth);\n    log(`${ name } was locally resolved correctly`);\n    return res;\n  }\n  async resolver(name, depth) {\n    if (depth === 0) {\n      const errMsg = `could not resolve name (recursion limit of ${ defaultMaximumRecursiveDepth } exceeded)`;\n      log.error(errMsg);\n      throw errCode__default[\"default\"](new Error(errMsg), 'ERR_RESOLVE_RECURSION_LIMIT');\n    }\n    const res = await this._resolveName(name);\n    const nameSegments = res.split('/');\n    if (nameSegments[1] === 'ipfs' || !depth) {\n      return res;\n    }\n    return this.resolver(nameSegments[2], depth - 1);\n  }\n  async _resolveName(name) {\n    const peerId = PeerId__default[\"default\"].parse(name);\n    const {routingKey} = ipns__namespace.getIdKeys(peerId.toBytes());\n    let record;\n    try {\n      record = await this._routing.get(routingKey.uint8Array());\n    } catch (err) {\n      log.error('could not get record from routing', err);\n      if (err.code === ERR_NOT_FOUND) {\n        throw errCode__default[\"default\"](new Error(`record requested for ${ name } was not found in the network`), 'ERR_NO_RECORD_FOUND');\n      }\n      throw errCode__default[\"default\"](new Error(`unexpected error getting the ipns record ${ peerId.toString() }`), 'ERR_UNEXPECTED_ERROR_GETTING_RECORD');\n    }\n    let ipnsEntry;\n    try {\n      ipnsEntry = ipns__namespace.unmarshal(record);\n    } catch (err) {\n      log.error('could not unmarshal record', err);\n      throw errCode__default[\"default\"](new Error('found ipns record that we couldn\\'t convert to a value'), 'ERR_INVALID_RECORD_RECEIVED');\n    }\n    return this._validateRecord(peerId, ipnsEntry);\n  }\n  async _validateRecord(peerId, ipnsEntry) {\n    const pubKey = await ipns__namespace.extractPublicKey(peerId, ipnsEntry);\n    await ipns__namespace.validate(pubKey, ipnsEntry);\n    return toString.toString(ipnsEntry.value);\n  }\n}\n\nexports.IpnsResolver = IpnsResolver;\n"},"lineCount":106}},"error":null,"hash":"2af57219cec0bde53c82870654773319","cacheData":{"env":{}}}