{"id":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","dependencies":[{"name":"C:\\Users\\matte\\Documents\\SKR\\package.json","includedInParent":true,"mtime":1638722727563},{"name":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\package.json","includedInParent":true,"mtime":1638722720622},{"name":"multiformats/cid","loc":{"line":5,"column":18},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\pin-manager.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\multiformats\\cjs\\src\\cid.js"},{"name":"err-code","loc":{"line":6,"column":22},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\pin-manager.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\err-code\\index.js"},{"name":"debug","loc":{"line":7,"column":20},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\pin-manager.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\debug\\src\\browser.js"},{"name":"it-first","loc":{"line":8,"column":20},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\pin-manager.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\it-first\\index.js"},{"name":"multiformats/block","loc":{"line":9,"column":20},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\pin-manager.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\multiformats\\cjs\\src\\block.js"},{"name":"cborg","loc":{"line":10,"column":20},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\pin-manager.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\cborg\\cjs\\cborg.js"},{"name":"@ipld/dag-pb","loc":{"line":11,"column":20},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\pin-manager.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\@ipld\\dag-pb\\cjs\\src\\index.js"},{"name":"./utils/blockstore.js","loc":{"line":12,"column":25},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\pin-manager.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\utils\\blockstore.js"},{"name":"./utils/walk-dag.js","loc":{"line":13,"column":22},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\pin-manager.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\utils\\walk-dag.js"},{"name":"./pin-types.js","loc":{"line":14,"column":23},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\pin-manager.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-repo\\cjs\\src\\pin-types.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar errCode = require('err-code');\nvar debug = require('debug');\nvar first = require('it-first');\nvar block = require('multiformats/block');\nvar cborg = require('cborg');\nvar dagPb = require('@ipld/dag-pb');\nvar blockstore = require('./utils/blockstore.js');\nvar walkDag = require('./utils/walk-dag.js');\nvar pinTypes = require('./pin-types.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar first__default = /*#__PURE__*/_interopDefaultLegacy(first);\nvar cborg__namespace = /*#__PURE__*/_interopNamespace(cborg);\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\n\nfunction invalidPinTypeErr(type) {\n  const errMsg = `Invalid type '${ type }', must be one of {direct, indirect, recursive, all}`;\n  return errCode__default[\"default\"](new Error(errMsg), 'ERR_INVALID_PIN_TYPE');\n}\nclass PinManager {\n  constructor({pinstore, blockstore, loadCodec}) {\n    this.pinstore = pinstore;\n    this.blockstore = blockstore;\n    this.loadCodec = loadCodec;\n    this.log = debug__default[\"default\"]('ipfs:repo:pin');\n    this.directPins = new Set();\n    this.recursivePins = new Set();\n  }\n  async pinDirectly(cid, options = {}) {\n    await this.blockstore.get(cid, options);\n    const pin = { depth: 0 };\n    if (cid.version !== 0) {\n      pin.version = cid.version;\n    }\n    if (cid.code !== dagPb__namespace.code) {\n      pin.codec = cid.code;\n    }\n    if (options.metadata) {\n      pin.metadata = options.metadata;\n    }\n    return this.pinstore.put(blockstore.cidToKey(cid), cborg__namespace.encode(pin));\n  }\n  unpin(cid, options) {\n    return this.pinstore.delete(blockstore.cidToKey(cid), options);\n  }\n  async pinRecursively(cid, options = {}) {\n    await this.fetchCompleteDag(cid, options);\n    const pin = { depth: Infinity };\n    if (cid.version !== 0) {\n      pin.version = cid.version;\n    }\n    if (cid.code !== dagPb__namespace.code) {\n      pin.codec = cid.code;\n    }\n    if (options.metadata) {\n      pin.metadata = options.metadata;\n    }\n    await this.pinstore.put(blockstore.cidToKey(cid), cborg__namespace.encode(pin));\n  }\n  async *directKeys(options) {\n    for await (const entry of this.pinstore.query({\n        filters: [entry => {\n            const pin = cborg__namespace.decode(entry.value);\n            return pin.depth === 0;\n          }]\n      })) {\n      const pin = cborg__namespace.decode(entry.value);\n      const version = pin.version || 0;\n      const codec = pin.codec != null ? pin.codec : dagPb__namespace.code;\n      const multihash = blockstore.keyToMultihash(entry.key);\n      yield {\n        cid: cid.CID.create(version, codec, multihash),\n        metadata: pin.metadata\n      };\n    }\n  }\n  async *recursiveKeys(options) {\n    for await (const entry of this.pinstore.query({\n        filters: [entry => {\n            const pin = cborg__namespace.decode(entry.value);\n            return pin.depth === Infinity;\n          }]\n      })) {\n      const pin = cborg__namespace.decode(entry.value);\n      const version = pin.version || 0;\n      const codec = pin.codec != null ? pin.codec : dagPb__namespace.code;\n      const multihash = blockstore.keyToMultihash(entry.key);\n      yield {\n        cid: cid.CID.create(version, codec, multihash),\n        metadata: pin.metadata\n      };\n    }\n  }\n  async *indirectKeys(options) {\n    for await (const {cid} of this.recursiveKeys()) {\n      for await (const childCid of walkDag.walkDag(cid, this.blockstore, this.loadCodec, options)) {\n        const types = [pinTypes.PinTypes.recursive];\n        const result = await this.isPinnedWithType(childCid, types);\n        if (result.pinned) {\n          continue;\n        }\n        yield childCid;\n      }\n    }\n  }\n  async isPinnedWithType(cid, types, options) {\n    if (!Array.isArray(types)) {\n      types = [types];\n    }\n    const all = types.includes(pinTypes.PinTypes.all);\n    const direct = types.includes(pinTypes.PinTypes.direct);\n    const recursive = types.includes(pinTypes.PinTypes.recursive);\n    const indirect = types.includes(pinTypes.PinTypes.indirect);\n    if (recursive || direct || all) {\n      const result = await first__default[\"default\"](this.pinstore.query({\n        prefix: blockstore.cidToKey(cid).toString(),\n        filters: [entry => {\n            if (all) {\n              return true;\n            }\n            const pin = cborg__namespace.decode(entry.value);\n            return types.includes(pin.depth === 0 ? pinTypes.PinTypes.direct : pinTypes.PinTypes.recursive);\n          }],\n        limit: 1\n      }));\n      if (result) {\n        const pin = cborg__namespace.decode(result.value);\n        return {\n          cid,\n          pinned: true,\n          reason: pin.depth === 0 ? pinTypes.PinTypes.direct : pinTypes.PinTypes.recursive,\n          metadata: pin.metadata\n        };\n      }\n    }\n    const self = this;\n    async function* findChild(key, source) {\n      for await (const {cid: parentCid} of source) {\n        for await (const childCid of walkDag.walkDag(parentCid, self.blockstore, self.loadCodec)) {\n          if (childCid.equals(key)) {\n            yield parentCid;\n            return;\n          }\n        }\n      }\n    }\n    if (all || indirect) {\n      const parentCid = await first__default[\"default\"](findChild(cid, this.recursiveKeys()));\n      if (parentCid) {\n        return {\n          cid,\n          pinned: true,\n          reason: pinTypes.PinTypes.indirect,\n          parent: parentCid\n        };\n      }\n    }\n    return {\n      cid,\n      pinned: false\n    };\n  }\n  async fetchCompleteDag(cid, options) {\n    const seen = new Set();\n    const walkDag = async (cid, options) => {\n      if (seen.has(cid.toString())) {\n        return;\n      }\n      seen.add(cid.toString());\n      const bytes = await this.blockstore.get(cid, options);\n      const codec = await this.loadCodec(cid.code);\n      const block$1 = block.createUnsafe({\n        bytes,\n        cid,\n        codec\n      });\n      await Promise.all([...block$1.links()].map(([, childCid]) => walkDag(childCid, options)));\n    };\n    await walkDag(cid, options);\n  }\n  static checkPinType(type) {\n    if (typeof type !== 'string' || !Object.keys(pinTypes.PinTypes).includes(type)) {\n      throw invalidPinTypeErr(type);\n    }\n    return true;\n  }\n}\n\nexports.PinManager = PinManager;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/ipfs-repo/cjs/src/pin-manager.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}}],"sources":{"../node_modules/ipfs-repo/cjs/src/pin-manager.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar errCode = require('err-code');\nvar debug = require('debug');\nvar first = require('it-first');\nvar block = require('multiformats/block');\nvar cborg = require('cborg');\nvar dagPb = require('@ipld/dag-pb');\nvar blockstore = require('./utils/blockstore.js');\nvar walkDag = require('./utils/walk-dag.js');\nvar pinTypes = require('./pin-types.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar first__default = /*#__PURE__*/_interopDefaultLegacy(first);\nvar cborg__namespace = /*#__PURE__*/_interopNamespace(cborg);\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\n\nfunction invalidPinTypeErr(type) {\n  const errMsg = `Invalid type '${ type }', must be one of {direct, indirect, recursive, all}`;\n  return errCode__default[\"default\"](new Error(errMsg), 'ERR_INVALID_PIN_TYPE');\n}\nclass PinManager {\n  constructor({pinstore, blockstore, loadCodec}) {\n    this.pinstore = pinstore;\n    this.blockstore = blockstore;\n    this.loadCodec = loadCodec;\n    this.log = debug__default[\"default\"]('ipfs:repo:pin');\n    this.directPins = new Set();\n    this.recursivePins = new Set();\n  }\n  async pinDirectly(cid, options = {}) {\n    await this.blockstore.get(cid, options);\n    const pin = { depth: 0 };\n    if (cid.version !== 0) {\n      pin.version = cid.version;\n    }\n    if (cid.code !== dagPb__namespace.code) {\n      pin.codec = cid.code;\n    }\n    if (options.metadata) {\n      pin.metadata = options.metadata;\n    }\n    return this.pinstore.put(blockstore.cidToKey(cid), cborg__namespace.encode(pin));\n  }\n  unpin(cid, options) {\n    return this.pinstore.delete(blockstore.cidToKey(cid), options);\n  }\n  async pinRecursively(cid, options = {}) {\n    await this.fetchCompleteDag(cid, options);\n    const pin = { depth: Infinity };\n    if (cid.version !== 0) {\n      pin.version = cid.version;\n    }\n    if (cid.code !== dagPb__namespace.code) {\n      pin.codec = cid.code;\n    }\n    if (options.metadata) {\n      pin.metadata = options.metadata;\n    }\n    await this.pinstore.put(blockstore.cidToKey(cid), cborg__namespace.encode(pin));\n  }\n  async *directKeys(options) {\n    for await (const entry of this.pinstore.query({\n        filters: [entry => {\n            const pin = cborg__namespace.decode(entry.value);\n            return pin.depth === 0;\n          }]\n      })) {\n      const pin = cborg__namespace.decode(entry.value);\n      const version = pin.version || 0;\n      const codec = pin.codec != null ? pin.codec : dagPb__namespace.code;\n      const multihash = blockstore.keyToMultihash(entry.key);\n      yield {\n        cid: cid.CID.create(version, codec, multihash),\n        metadata: pin.metadata\n      };\n    }\n  }\n  async *recursiveKeys(options) {\n    for await (const entry of this.pinstore.query({\n        filters: [entry => {\n            const pin = cborg__namespace.decode(entry.value);\n            return pin.depth === Infinity;\n          }]\n      })) {\n      const pin = cborg__namespace.decode(entry.value);\n      const version = pin.version || 0;\n      const codec = pin.codec != null ? pin.codec : dagPb__namespace.code;\n      const multihash = blockstore.keyToMultihash(entry.key);\n      yield {\n        cid: cid.CID.create(version, codec, multihash),\n        metadata: pin.metadata\n      };\n    }\n  }\n  async *indirectKeys(options) {\n    for await (const {cid} of this.recursiveKeys()) {\n      for await (const childCid of walkDag.walkDag(cid, this.blockstore, this.loadCodec, options)) {\n        const types = [pinTypes.PinTypes.recursive];\n        const result = await this.isPinnedWithType(childCid, types);\n        if (result.pinned) {\n          continue;\n        }\n        yield childCid;\n      }\n    }\n  }\n  async isPinnedWithType(cid, types, options) {\n    if (!Array.isArray(types)) {\n      types = [types];\n    }\n    const all = types.includes(pinTypes.PinTypes.all);\n    const direct = types.includes(pinTypes.PinTypes.direct);\n    const recursive = types.includes(pinTypes.PinTypes.recursive);\n    const indirect = types.includes(pinTypes.PinTypes.indirect);\n    if (recursive || direct || all) {\n      const result = await first__default[\"default\"](this.pinstore.query({\n        prefix: blockstore.cidToKey(cid).toString(),\n        filters: [entry => {\n            if (all) {\n              return true;\n            }\n            const pin = cborg__namespace.decode(entry.value);\n            return types.includes(pin.depth === 0 ? pinTypes.PinTypes.direct : pinTypes.PinTypes.recursive);\n          }],\n        limit: 1\n      }));\n      if (result) {\n        const pin = cborg__namespace.decode(result.value);\n        return {\n          cid,\n          pinned: true,\n          reason: pin.depth === 0 ? pinTypes.PinTypes.direct : pinTypes.PinTypes.recursive,\n          metadata: pin.metadata\n        };\n      }\n    }\n    const self = this;\n    async function* findChild(key, source) {\n      for await (const {cid: parentCid} of source) {\n        for await (const childCid of walkDag.walkDag(parentCid, self.blockstore, self.loadCodec)) {\n          if (childCid.equals(key)) {\n            yield parentCid;\n            return;\n          }\n        }\n      }\n    }\n    if (all || indirect) {\n      const parentCid = await first__default[\"default\"](findChild(cid, this.recursiveKeys()));\n      if (parentCid) {\n        return {\n          cid,\n          pinned: true,\n          reason: pinTypes.PinTypes.indirect,\n          parent: parentCid\n        };\n      }\n    }\n    return {\n      cid,\n      pinned: false\n    };\n  }\n  async fetchCompleteDag(cid, options) {\n    const seen = new Set();\n    const walkDag = async (cid, options) => {\n      if (seen.has(cid.toString())) {\n        return;\n      }\n      seen.add(cid.toString());\n      const bytes = await this.blockstore.get(cid, options);\n      const codec = await this.loadCodec(cid.code);\n      const block$1 = block.createUnsafe({\n        bytes,\n        cid,\n        codec\n      });\n      await Promise.all([...block$1.links()].map(([, childCid]) => walkDag(childCid, options)));\n    };\n    await walkDag(cid, options);\n  }\n  static checkPinType(type) {\n    if (typeof type !== 'string' || !Object.keys(pinTypes.PinTypes).includes(type)) {\n      throw invalidPinTypeErr(type);\n    }\n    return true;\n  }\n}\n\nexports.PinManager = PinManager;\n"},"lineCount":216}},"error":null,"hash":"8928eec36f67aebdf80f5fa43cc7bd0e","cacheData":{"env":{}}}