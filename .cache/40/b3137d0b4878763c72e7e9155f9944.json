{"id":"../node_modules/libp2p/src/circuit/utils.js","dependencies":[{"name":"C:\\Users\\matte\\Documents\\SKR\\package.json","includedInParent":true,"mtime":1638722727563},{"name":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p\\package.json","includedInParent":true,"mtime":1638722718888},{"name":"multiformats/cid","loc":{"line":3,"column":24},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p\\src\\circuit\\utils.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\multiformats\\cjs\\src\\cid.js"},{"name":"multiformats/hashes/sha2","loc":{"line":4,"column":27},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p\\src\\circuit\\utils.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\multiformats\\cjs\\src\\hashes\\sha2-browser.js"}],"generated":{"js":"'use strict';\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar _require2 = require('multiformats/hashes/sha2'),\n    sha256 = _require2.sha256;\n/**\n * Convert a namespace string into a cid.\n *\n * @param {string} namespace\n * @returns {Promise<CID>}\n */\n\n\nmodule.exports.namespaceToCid = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(namespace) {\n    var bytes, hash;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            bytes = new TextEncoder().encode(namespace);\n            _context.next = 3;\n            return sha256.digest(bytes);\n\n          case 3:\n            hash = _context.sent;\n            return _context.abrupt(\"return\", CID.createV0(hash));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":1,"column":0}},{"generated":{"line":7,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":3,"column":0}},{"name":"require","generated":{"line":7,"column":15},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":3,"column":16}},{"generated":{"line":7,"column":22},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":3,"column":23}},{"generated":{"line":7,"column":23},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":3,"column":24}},{"generated":{"line":7,"column":41},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":3,"column":23}},{"generated":{"line":7,"column":42},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":3,"column":0}},{"generated":{"line":8,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":3,"column":0}},{"name":"CID","generated":{"line":8,"column":4},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":3,"column":8}},{"generated":{"line":8,"column":7},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":3,"column":0}},{"name":"CID","generated":{"line":8,"column":19},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":3,"column":8}},{"generated":{"line":8,"column":22},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":4,"column":0}},{"name":"require","generated":{"line":10,"column":16},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":4,"column":19}},{"generated":{"line":10,"column":23},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":4,"column":26}},{"generated":{"line":10,"column":24},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":4,"column":27}},{"generated":{"line":10,"column":50},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":4,"column":26}},{"generated":{"line":10,"column":51},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":4,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":4,"column":0}},{"name":"sha256","generated":{"line":11,"column":4},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":4,"column":8}},{"generated":{"line":11,"column":10},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":4,"column":0}},{"name":"sha256","generated":{"line":11,"column":23},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":4,"column":8}},{"generated":{"line":11,"column":29},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":6,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":7,"column":0}},{"generated":{"line":14,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":8,"column":0}},{"generated":{"line":15,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":9,"column":0}},{"generated":{"line":16,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":10,"column":0}},{"generated":{"line":17,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":11,"column":0}},{"name":"module","generated":{"line":20,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":0}},{"generated":{"line":20,"column":6},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":6}},{"name":"exports","generated":{"line":20,"column":7},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":7}},{"generated":{"line":20,"column":14},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":0}},{"name":"namespaceToCid","generated":{"line":20,"column":15},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":15}},{"generated":{"line":20,"column":29},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":0}},{"generated":{"line":21,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":0}},{"generated":{"line":21,"column":69},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"name":"namespace","generated":{"line":21,"column":86},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":39}},{"generated":{"line":21,"column":95},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":22,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":23,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":24,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":25,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":26,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"name":"bytes","generated":{"line":27,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":13,"column":8}},{"name":"bytes","generated":{"line":27,"column":12},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":13,"column":8}},{"generated":{"line":27,"column":17},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":27,"column":20},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":13,"column":16}},{"name":"TextEncoder","generated":{"line":27,"column":24},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":13,"column":20}},{"generated":{"line":27,"column":35},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":13,"column":16}},{"name":"encode","generated":{"line":27,"column":38},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":13,"column":34}},{"generated":{"line":27,"column":44},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":13,"column":16}},{"name":"namespace","generated":{"line":27,"column":45},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":13,"column":41}},{"generated":{"line":27,"column":54},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":13,"column":16}},{"generated":{"line":27,"column":55},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":28,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":29,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"name":"sha256","generated":{"line":29,"column":19},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":14,"column":21}},{"generated":{"line":29,"column":25},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":14,"column":27}},{"name":"digest","generated":{"line":29,"column":26},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":14,"column":28}},{"generated":{"line":29,"column":32},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":14,"column":21}},{"name":"bytes","generated":{"line":29,"column":33},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":14,"column":35}},{"generated":{"line":29,"column":38},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":14,"column":21}},{"generated":{"line":29,"column":39},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":31,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"name":"hash","generated":{"line":32,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":14,"column":8}},{"name":"hash","generated":{"line":32,"column":12},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":14,"column":8}},{"generated":{"line":32,"column":16},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":33,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"name":"CID","generated":{"line":33,"column":45},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":16,"column":9}},{"generated":{"line":33,"column":48},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":16,"column":12}},{"name":"createV0","generated":{"line":33,"column":49},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":16,"column":13}},{"generated":{"line":33,"column":57},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":16,"column":9}},{"name":"hash","generated":{"line":33,"column":58},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":16,"column":22}},{"generated":{"line":33,"column":62},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":16,"column":9}},{"generated":{"line":33,"column":63},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":35,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":36,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":37,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":38,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":39,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":40,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":41,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":32}},{"generated":{"line":41,"column":3},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":0}},{"generated":{"line":43,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":0}},{"generated":{"line":44,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":0}},{"generated":{"line":45,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":0}},{"generated":{"line":46,"column":0},"source":"../node_modules/libp2p/src/circuit/utils.js","original":{"line":12,"column":0}}],"sources":{"../node_modules/libp2p/src/circuit/utils.js":"'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst { sha256 } = require('multiformats/hashes/sha2')\n\n/**\n * Convert a namespace string into a cid.\n *\n * @param {string} namespace\n * @returns {Promise<CID>}\n */\nmodule.exports.namespaceToCid = async (namespace) => {\n  const bytes = new TextEncoder().encode(namespace)\n  const hash = await sha256.digest(bytes)\n\n  return CID.createV0(hash)\n}\n"},"lineCount":null}},"error":null,"hash":"a0ff0f2415e245da17e27a55812718d2","cacheData":{"env":{}}}