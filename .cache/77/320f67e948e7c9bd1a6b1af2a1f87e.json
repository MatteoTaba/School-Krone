{"id":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","dependencies":[{"name":"C:\\Users\\matte\\Documents\\SKR\\package.json","includedInParent":true,"mtime":1638722727563},{"name":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\package.json","includedInParent":true,"mtime":1638722721198},{"name":"./mkdir.js","loc":{"line":5,"column":20},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\cp.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\mkdir.js"},{"name":"./stat.js","loc":{"line":6,"column":19},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\cp.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\stat.js"},{"name":"debug","loc":{"line":7,"column":20},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\cp.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\debug\\src\\browser.js"},{"name":"err-code","loc":{"line":8,"column":22},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\cp.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\err-code\\index.js"},{"name":"./utils/update-tree.js","loc":{"line":9,"column":25},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\cp.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\utils\\update-tree.js"},{"name":"./utils/update-mfs-root.js","loc":{"line":10,"column":28},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\cp.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\utils\\update-mfs-root.js"},{"name":"./utils/add-link.js","loc":{"line":11,"column":22},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\cp.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\utils\\add-link.js"},{"name":"./utils/to-mfs-path.js","loc":{"line":12,"column":24},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\cp.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\utils\\to-mfs-path.js"},{"name":"merge-options","loc":{"line":13,"column":24},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\cp.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\merge-options\\index.js"},{"name":"./utils/to-trail.js","loc":{"line":14,"column":22},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\cp.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\utils\\to-trail.js"},{"name":"ipfs-core-utils/with-timeout-option","loc":{"line":15,"column":32},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core\\cjs\\src\\components\\files\\cp.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-core-utils\\cjs\\src\\with-timeout-option.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar mkdir = require('./mkdir.js');\nvar stat = require('./stat.js');\nvar debug = require('debug');\nvar errCode = require('err-code');\nvar updateTree = require('./utils/update-tree.js');\nvar updateMfsRoot = require('./utils/update-mfs-root.js');\nvar addLink = require('./utils/add-link.js');\nvar toMfsPath = require('./utils/to-mfs-path.js');\nvar mergeOpts = require('merge-options');\nvar toTrail = require('./utils/to-trail.js');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar mergeOpts__default = /*#__PURE__*/_interopDefaultLegacy(mergeOpts);\n\nconst mergeOptions = mergeOpts__default[\"default\"].bind({ ignoreUndefined: true });\nconst log = debug__default[\"default\"]('ipfs:mfs:cp');\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  shardSplitThreshold: 1000\n};\nfunction createCp(context) {\n  async function mfsCp(from, to, opts = {}) {\n    const options = mergeOptions(defaultOptions, opts);\n    if (!Array.isArray(from)) {\n      from = [from];\n    }\n    const sources = await Promise.all(from.map(path => toMfsPath.toMfsPath(context, path, options)));\n    let destination = await toMfsPath.toMfsPath(context, to, options);\n    if (!sources.length || !destination) {\n      throw errCode__default[\"default\"](new Error('Please supply at least one source'), 'ERR_INVALID_PARAMS');\n    }\n    const missing = sources.find(source => !source.exists);\n    if (missing) {\n      throw errCode__default[\"default\"](new Error(`${ missing.path } does not exist`), 'ERR_INVALID_PARAMS');\n    }\n    const destinationIsDirectory = isDirectory(destination);\n    if (destination.exists) {\n      log('Destination exists');\n      if (sources.length === 1 && !destinationIsDirectory) {\n        throw errCode__default[\"default\"](new Error('directory already has entry by that name'), 'ERR_ALREADY_EXISTS');\n      }\n    } else {\n      log('Destination does not exist');\n      if (sources.length > 1) {\n        if (!options.parents) {\n          throw errCode__default[\"default\"](new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');\n        }\n        await mkdir.createMkdir(context)(destination.path, options);\n        destination = await toMfsPath.toMfsPath(context, destination.path, options);\n      } else if (destination.parts.length > 1) {\n        const parentFolder = `/${ destination.parts.slice(0, -1).join('/') }`;\n        try {\n          await stat.createStat(context)(parentFolder, options);\n        } catch (err) {\n          if (err.code !== 'ERR_NOT_FOUND') {\n            throw err;\n          }\n          if (!options.parents) {\n            throw errCode__default[\"default\"](new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');\n          }\n          await mkdir.createMkdir(context)(parentFolder, options);\n          destination = await toMfsPath.toMfsPath(context, destination.path, options);\n        }\n      }\n    }\n    const destinationPath = isDirectory(destination) ? destination.mfsPath : destination.mfsDirectory;\n    const trail = await toTrail.toTrail(context, destinationPath);\n    if (sources.length === 1) {\n      const source = sources.pop();\n      if (!source) {\n        throw errCode__default[\"default\"](new Error('could not find source'), 'ERR_INVALID_PARAMS');\n      }\n      const destinationName = destinationIsDirectory ? source.name : destination.name;\n      log(`Only one source, copying to destination ${ destinationIsDirectory ? 'directory' : 'file' } ${ destinationName }`);\n      return copyToFile(context, source, destinationName, trail, options);\n    }\n    log('Multiple sources, wrapping in a directory');\n    return copyToDirectory(context, sources, destination, trail, options);\n  }\n  return withTimeoutOption.withTimeoutOption(mfsCp);\n}\nconst isDirectory = destination => {\n  return destination.unixfs && destination.unixfs.type && destination.unixfs.type.includes('directory');\n};\nconst copyToFile = async (context, source, destination, destinationTrail, options) => {\n  let parent = destinationTrail.pop();\n  if (!parent) {\n    throw errCode__default[\"default\"](new Error('destination had no parent'), 'ERR_INVALID_PARAMS');\n  }\n  parent = await addSourceToParent(context, source, destination, parent, options);\n  destinationTrail.push(parent);\n  const newRootCid = await updateTree.updateTree(context, destinationTrail, options);\n  await updateMfsRoot.updateMfsRoot(context, newRootCid, options);\n};\nconst copyToDirectory = async (context, sources, destination, destinationTrail, options) => {\n  for (let i = 0; i < sources.length; i++) {\n    const source = sources[i];\n    destination = await addSourceToParent(context, source, source.name, destination, options);\n  }\n  destinationTrail[destinationTrail.length - 1] = destination;\n  const newRootCid = await updateTree.updateTree(context, destinationTrail, options);\n  await updateMfsRoot.updateMfsRoot(context, newRootCid, options);\n};\nconst addSourceToParent = async (context, source, childName, parent, options) => {\n  const sourceBlock = await context.repo.blocks.get(source.cid);\n  const {node, cid, size} = await addLink.addLink(context, {\n    parentCid: parent.cid,\n    size: sourceBlock.length,\n    cid: source.cid,\n    name: childName,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  });\n  parent.node = node;\n  parent.cid = cid;\n  parent.size = size;\n  return parent;\n};\n\nexports.createCp = createCp;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/ipfs-core/cjs/src/components/files/cp.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}}],"sources":{"../node_modules/ipfs-core/cjs/src/components/files/cp.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar mkdir = require('./mkdir.js');\nvar stat = require('./stat.js');\nvar debug = require('debug');\nvar errCode = require('err-code');\nvar updateTree = require('./utils/update-tree.js');\nvar updateMfsRoot = require('./utils/update-mfs-root.js');\nvar addLink = require('./utils/add-link.js');\nvar toMfsPath = require('./utils/to-mfs-path.js');\nvar mergeOpts = require('merge-options');\nvar toTrail = require('./utils/to-trail.js');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar mergeOpts__default = /*#__PURE__*/_interopDefaultLegacy(mergeOpts);\n\nconst mergeOptions = mergeOpts__default[\"default\"].bind({ ignoreUndefined: true });\nconst log = debug__default[\"default\"]('ipfs:mfs:cp');\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  shardSplitThreshold: 1000\n};\nfunction createCp(context) {\n  async function mfsCp(from, to, opts = {}) {\n    const options = mergeOptions(defaultOptions, opts);\n    if (!Array.isArray(from)) {\n      from = [from];\n    }\n    const sources = await Promise.all(from.map(path => toMfsPath.toMfsPath(context, path, options)));\n    let destination = await toMfsPath.toMfsPath(context, to, options);\n    if (!sources.length || !destination) {\n      throw errCode__default[\"default\"](new Error('Please supply at least one source'), 'ERR_INVALID_PARAMS');\n    }\n    const missing = sources.find(source => !source.exists);\n    if (missing) {\n      throw errCode__default[\"default\"](new Error(`${ missing.path } does not exist`), 'ERR_INVALID_PARAMS');\n    }\n    const destinationIsDirectory = isDirectory(destination);\n    if (destination.exists) {\n      log('Destination exists');\n      if (sources.length === 1 && !destinationIsDirectory) {\n        throw errCode__default[\"default\"](new Error('directory already has entry by that name'), 'ERR_ALREADY_EXISTS');\n      }\n    } else {\n      log('Destination does not exist');\n      if (sources.length > 1) {\n        if (!options.parents) {\n          throw errCode__default[\"default\"](new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');\n        }\n        await mkdir.createMkdir(context)(destination.path, options);\n        destination = await toMfsPath.toMfsPath(context, destination.path, options);\n      } else if (destination.parts.length > 1) {\n        const parentFolder = `/${ destination.parts.slice(0, -1).join('/') }`;\n        try {\n          await stat.createStat(context)(parentFolder, options);\n        } catch (err) {\n          if (err.code !== 'ERR_NOT_FOUND') {\n            throw err;\n          }\n          if (!options.parents) {\n            throw errCode__default[\"default\"](new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');\n          }\n          await mkdir.createMkdir(context)(parentFolder, options);\n          destination = await toMfsPath.toMfsPath(context, destination.path, options);\n        }\n      }\n    }\n    const destinationPath = isDirectory(destination) ? destination.mfsPath : destination.mfsDirectory;\n    const trail = await toTrail.toTrail(context, destinationPath);\n    if (sources.length === 1) {\n      const source = sources.pop();\n      if (!source) {\n        throw errCode__default[\"default\"](new Error('could not find source'), 'ERR_INVALID_PARAMS');\n      }\n      const destinationName = destinationIsDirectory ? source.name : destination.name;\n      log(`Only one source, copying to destination ${ destinationIsDirectory ? 'directory' : 'file' } ${ destinationName }`);\n      return copyToFile(context, source, destinationName, trail, options);\n    }\n    log('Multiple sources, wrapping in a directory');\n    return copyToDirectory(context, sources, destination, trail, options);\n  }\n  return withTimeoutOption.withTimeoutOption(mfsCp);\n}\nconst isDirectory = destination => {\n  return destination.unixfs && destination.unixfs.type && destination.unixfs.type.includes('directory');\n};\nconst copyToFile = async (context, source, destination, destinationTrail, options) => {\n  let parent = destinationTrail.pop();\n  if (!parent) {\n    throw errCode__default[\"default\"](new Error('destination had no parent'), 'ERR_INVALID_PARAMS');\n  }\n  parent = await addSourceToParent(context, source, destination, parent, options);\n  destinationTrail.push(parent);\n  const newRootCid = await updateTree.updateTree(context, destinationTrail, options);\n  await updateMfsRoot.updateMfsRoot(context, newRootCid, options);\n};\nconst copyToDirectory = async (context, sources, destination, destinationTrail, options) => {\n  for (let i = 0; i < sources.length; i++) {\n    const source = sources[i];\n    destination = await addSourceToParent(context, source, source.name, destination, options);\n  }\n  destinationTrail[destinationTrail.length - 1] = destination;\n  const newRootCid = await updateTree.updateTree(context, destinationTrail, options);\n  await updateMfsRoot.updateMfsRoot(context, newRootCid, options);\n};\nconst addSourceToParent = async (context, source, childName, parent, options) => {\n  const sourceBlock = await context.repo.blocks.get(source.cid);\n  const {node, cid, size} = await addLink.addLink(context, {\n    parentCid: parent.cid,\n    size: sourceBlock.length,\n    cid: source.cid,\n    name: childName,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  });\n  parent.node = node;\n  parent.cid = cid;\n  parent.size = size;\n  return parent;\n};\n\nexports.createCp = createCp;\n"},"lineCount":134}},"error":null,"hash":"a12f2ca0d974ca4f6400678d9faafd1f","cacheData":{"env":{}}}