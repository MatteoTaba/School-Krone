{"id":"../node_modules/stream-to-it/transform.js","dependencies":[{"name":"C:\\Users\\matte\\Documents\\SKR\\package.json","includedInParent":true,"mtime":1638722727563},{"name":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\stream-to-it\\package.json","includedInParent":true,"mtime":1638722653058},{"name":"./duplex","loc":{"line":1,"column":25},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\stream-to-it\\transform.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\stream-to-it\\duplex.js"}],"generated":{"js":"const toDuplex = require('./duplex')\n\nmodule.exports = transform => async function * (source) {\n  const duplex = toDuplex(transform)\n  // In a transform the sink and source are connected, an error in the sink\n  // will be thrown in the source also. Catch the sink error to avoid unhandled\n  // rejections and yield from the source.\n  let sinkError\n  duplex.sink(source).catch(err => { sinkError = err })\n\n  yield * duplex.source\n  if (sinkError) throw sinkError\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/stream-to-it/transform.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/stream-to-it/transform.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/stream-to-it/transform.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/stream-to-it/transform.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/stream-to-it/transform.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/stream-to-it/transform.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/stream-to-it/transform.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/stream-to-it/transform.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/stream-to-it/transform.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/stream-to-it/transform.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/stream-to-it/transform.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/stream-to-it/transform.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/stream-to-it/transform.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/stream-to-it/transform.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}}],"sources":{"../node_modules/stream-to-it/transform.js":"const toDuplex = require('./duplex')\n\nmodule.exports = transform => async function * (source) {\n  const duplex = toDuplex(transform)\n  // In a transform the sink and source are connected, an error in the sink\n  // will be thrown in the source also. Catch the sink error to avoid unhandled\n  // rejections and yield from the source.\n  let sinkError\n  duplex.sink(source).catch(err => { sinkError = err })\n\n  yield * duplex.source\n  if (sinkError) throw sinkError\n}\n"},"lineCount":14}},"error":null,"hash":"f3ae256ccce623f44d589f9ec6b293a3","cacheData":{"env":{}}}