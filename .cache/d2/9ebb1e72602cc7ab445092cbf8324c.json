{"id":"../node_modules/ipfs-bitswap/cjs/src/network.js","dependencies":[{"name":"C:\\Users\\matte\\Documents\\SKR\\package.json","includedInParent":true,"mtime":1638722727563},{"name":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-bitswap\\package.json","includedInParent":true,"mtime":1638722720608},{"name":"it-length-prefixed","loc":{"line":5,"column":17},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-bitswap\\cjs\\src\\network.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\it-length-prefixed\\src\\index.js"},{"name":"it-pipe","loc":{"line":6,"column":21},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-bitswap\\cjs\\src\\network.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\it-pipe\\index.js"},{"name":"libp2p-interfaces/src/topology/multicodec-topology.js","loc":{"line":7,"column":33},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-bitswap\\cjs\\src\\network.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-interfaces\\src\\topology\\multicodec-topology.js"},{"name":"./message/index.js","loc":{"line":8,"column":22},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-bitswap\\cjs\\src\\network.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-bitswap\\cjs\\src\\message\\index.js"},{"name":"./constants.js","loc":{"line":9,"column":24},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-bitswap\\cjs\\src\\network.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-bitswap\\cjs\\src\\constants.js"},{"name":"./utils/index.js","loc":{"line":10,"column":20},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-bitswap\\cjs\\src\\network.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\ipfs-bitswap\\cjs\\src\\utils\\index.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar lp = require('it-length-prefixed');\nvar itPipe = require('it-pipe');\nvar MulticodecTopology = require('libp2p-interfaces/src/topology/multicodec-topology.js');\nvar index$1 = require('./message/index.js');\nvar constants = require('./constants.js');\nvar index = require('./utils/index.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar lp__default = /*#__PURE__*/_interopDefaultLegacy(lp);\nvar MulticodecTopology__default = /*#__PURE__*/_interopDefaultLegacy(MulticodecTopology);\n\nconst BITSWAP100 = '/ipfs/bitswap/1.0.0';\nconst BITSWAP110 = '/ipfs/bitswap/1.1.0';\nconst BITSWAP120 = '/ipfs/bitswap/1.2.0';\nclass Network {\n  constructor(libp2p, bitswap, stats, options = {}) {\n    this._log = index.logger(libp2p.peerId, 'network');\n    this._libp2p = libp2p;\n    this._bitswap = bitswap;\n    this._protocols = [BITSWAP100];\n    if (!options.b100Only) {\n      this._protocols.unshift(BITSWAP110);\n      this._protocols.unshift(BITSWAP120);\n    }\n    this._stats = stats;\n    this._running = false;\n    this._onPeerConnect = this._onPeerConnect.bind(this);\n    this._onPeerDisconnect = this._onPeerDisconnect.bind(this);\n    this._onConnection = this._onConnection.bind(this);\n    this._hashLoader = options.hashLoader;\n  }\n  start() {\n    this._running = true;\n    this._libp2p.handle(this._protocols, this._onConnection);\n    const topology = new MulticodecTopology__default[\"default\"]({\n      multicodecs: this._protocols,\n      handlers: {\n        onConnect: this._onPeerConnect,\n        onDisconnect: this._onPeerDisconnect\n      }\n    });\n    this._registrarId = this._libp2p.registrar.register(topology);\n    for (const peer of this._libp2p.peerStore.peers.values()) {\n      const conn = this._libp2p.connectionManager.get(peer.id);\n      conn && this._onPeerConnect(conn.remotePeer);\n    }\n  }\n  stop() {\n    this._running = false;\n    this._libp2p.unhandle(this._protocols);\n    if (this._registrarId != null) {\n      this._libp2p.registrar.unregister(this._registrarId);\n    }\n  }\n  async _onConnection({protocol, stream, connection}) {\n    if (!this._running) {\n      return;\n    }\n    this._log('incoming new bitswap %s connection from %s', protocol, connection.remotePeer.toB58String());\n    try {\n      await itPipe.pipe(stream, lp__default[\"default\"].decode(), async source => {\n        for await (const data of source) {\n          try {\n            const message = await index$1.BitswapMessage.deserialize(data.slice(), this._hashLoader);\n            await this._bitswap._receiveMessage(connection.remotePeer, message);\n          } catch (err) {\n            this._bitswap._receiveError(err);\n            break;\n          }\n        }\n      });\n    } catch (err) {\n      this._log(err);\n    }\n  }\n  _onPeerConnect(peerId) {\n    this._bitswap._onPeerConnected(peerId);\n  }\n  _onPeerDisconnect(peerId) {\n    this._bitswap._onPeerDisconnected(peerId);\n  }\n  findProviders(cid, maxProviders, options = {}) {\n    return this._libp2p.contentRouting.findProviders(cid, {\n      timeout: constants.providerRequestTimeout,\n      maxNumProviders: maxProviders\n    });\n  }\n  async findAndConnect(cid, options) {\n    const connectAttempts = [];\n    for await (const provider of this.findProviders(cid, constants.maxProvidersPerRequest, options)) {\n      this._log(`connecting to provider ${ provider.id }`);\n      connectAttempts.push(this.connectTo(provider.id, options).catch(err => {\n        this._log.error(err);\n      }));\n    }\n    await Promise.all(connectAttempts);\n  }\n  async provide(cid, options) {\n    await this._libp2p.contentRouting.provide(cid, options);\n  }\n  async sendMessage(peer, msg) {\n    if (!this._running)\n      throw new Error('network isn\\'t running');\n    const stringId = peer.toB58String();\n    this._log('sendMessage to %s', stringId, msg);\n    const connection = await this._libp2p.dial(peer);\n    const {stream, protocol} = await connection.newStream([\n      BITSWAP120,\n      BITSWAP110,\n      BITSWAP100\n    ]);\n    let serialized;\n    switch (protocol) {\n    case BITSWAP100:\n      serialized = msg.serializeToBitswap100();\n      break;\n    case BITSWAP110:\n    case BITSWAP120:\n      serialized = msg.serializeToBitswap110();\n      break;\n    default:\n      throw new Error('Unknown protocol: ' + protocol);\n    }\n    writeMessage(stream, serialized, this._log);\n    this._updateSentStats(peer, msg.blocks);\n  }\n  async connectTo(peer, options) {\n    if (!this._running) {\n      throw new Error('network isn\\'t running');\n    }\n    return this._libp2p.dial(peer, options);\n  }\n  _updateSentStats(peer, blocks) {\n    const peerId = peer.toB58String();\n    if (this._stats) {\n      for (const block of blocks.values()) {\n        this._stats.push(peerId, 'dataSent', block.length);\n      }\n      this._stats.push(peerId, 'blocksSent', blocks.size);\n    }\n  }\n}\nasync function writeMessage(stream, msg, log) {\n  try {\n    await itPipe.pipe([msg], lp__default[\"default\"].encode(), stream);\n  } catch (err) {\n    log(err);\n  }\n}\n\nexports.Network = Network;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/ipfs-bitswap/cjs/src/network.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}}],"sources":{"../node_modules/ipfs-bitswap/cjs/src/network.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar lp = require('it-length-prefixed');\nvar itPipe = require('it-pipe');\nvar MulticodecTopology = require('libp2p-interfaces/src/topology/multicodec-topology.js');\nvar index$1 = require('./message/index.js');\nvar constants = require('./constants.js');\nvar index = require('./utils/index.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar lp__default = /*#__PURE__*/_interopDefaultLegacy(lp);\nvar MulticodecTopology__default = /*#__PURE__*/_interopDefaultLegacy(MulticodecTopology);\n\nconst BITSWAP100 = '/ipfs/bitswap/1.0.0';\nconst BITSWAP110 = '/ipfs/bitswap/1.1.0';\nconst BITSWAP120 = '/ipfs/bitswap/1.2.0';\nclass Network {\n  constructor(libp2p, bitswap, stats, options = {}) {\n    this._log = index.logger(libp2p.peerId, 'network');\n    this._libp2p = libp2p;\n    this._bitswap = bitswap;\n    this._protocols = [BITSWAP100];\n    if (!options.b100Only) {\n      this._protocols.unshift(BITSWAP110);\n      this._protocols.unshift(BITSWAP120);\n    }\n    this._stats = stats;\n    this._running = false;\n    this._onPeerConnect = this._onPeerConnect.bind(this);\n    this._onPeerDisconnect = this._onPeerDisconnect.bind(this);\n    this._onConnection = this._onConnection.bind(this);\n    this._hashLoader = options.hashLoader;\n  }\n  start() {\n    this._running = true;\n    this._libp2p.handle(this._protocols, this._onConnection);\n    const topology = new MulticodecTopology__default[\"default\"]({\n      multicodecs: this._protocols,\n      handlers: {\n        onConnect: this._onPeerConnect,\n        onDisconnect: this._onPeerDisconnect\n      }\n    });\n    this._registrarId = this._libp2p.registrar.register(topology);\n    for (const peer of this._libp2p.peerStore.peers.values()) {\n      const conn = this._libp2p.connectionManager.get(peer.id);\n      conn && this._onPeerConnect(conn.remotePeer);\n    }\n  }\n  stop() {\n    this._running = false;\n    this._libp2p.unhandle(this._protocols);\n    if (this._registrarId != null) {\n      this._libp2p.registrar.unregister(this._registrarId);\n    }\n  }\n  async _onConnection({protocol, stream, connection}) {\n    if (!this._running) {\n      return;\n    }\n    this._log('incoming new bitswap %s connection from %s', protocol, connection.remotePeer.toB58String());\n    try {\n      await itPipe.pipe(stream, lp__default[\"default\"].decode(), async source => {\n        for await (const data of source) {\n          try {\n            const message = await index$1.BitswapMessage.deserialize(data.slice(), this._hashLoader);\n            await this._bitswap._receiveMessage(connection.remotePeer, message);\n          } catch (err) {\n            this._bitswap._receiveError(err);\n            break;\n          }\n        }\n      });\n    } catch (err) {\n      this._log(err);\n    }\n  }\n  _onPeerConnect(peerId) {\n    this._bitswap._onPeerConnected(peerId);\n  }\n  _onPeerDisconnect(peerId) {\n    this._bitswap._onPeerDisconnected(peerId);\n  }\n  findProviders(cid, maxProviders, options = {}) {\n    return this._libp2p.contentRouting.findProviders(cid, {\n      timeout: constants.providerRequestTimeout,\n      maxNumProviders: maxProviders\n    });\n  }\n  async findAndConnect(cid, options) {\n    const connectAttempts = [];\n    for await (const provider of this.findProviders(cid, constants.maxProvidersPerRequest, options)) {\n      this._log(`connecting to provider ${ provider.id }`);\n      connectAttempts.push(this.connectTo(provider.id, options).catch(err => {\n        this._log.error(err);\n      }));\n    }\n    await Promise.all(connectAttempts);\n  }\n  async provide(cid, options) {\n    await this._libp2p.contentRouting.provide(cid, options);\n  }\n  async sendMessage(peer, msg) {\n    if (!this._running)\n      throw new Error('network isn\\'t running');\n    const stringId = peer.toB58String();\n    this._log('sendMessage to %s', stringId, msg);\n    const connection = await this._libp2p.dial(peer);\n    const {stream, protocol} = await connection.newStream([\n      BITSWAP120,\n      BITSWAP110,\n      BITSWAP100\n    ]);\n    let serialized;\n    switch (protocol) {\n    case BITSWAP100:\n      serialized = msg.serializeToBitswap100();\n      break;\n    case BITSWAP110:\n    case BITSWAP120:\n      serialized = msg.serializeToBitswap110();\n      break;\n    default:\n      throw new Error('Unknown protocol: ' + protocol);\n    }\n    writeMessage(stream, serialized, this._log);\n    this._updateSentStats(peer, msg.blocks);\n  }\n  async connectTo(peer, options) {\n    if (!this._running) {\n      throw new Error('network isn\\'t running');\n    }\n    return this._libp2p.dial(peer, options);\n  }\n  _updateSentStats(peer, blocks) {\n    const peerId = peer.toB58String();\n    if (this._stats) {\n      for (const block of blocks.values()) {\n        this._stats.push(peerId, 'dataSent', block.length);\n      }\n      this._stats.push(peerId, 'blocksSent', blocks.size);\n    }\n  }\n}\nasync function writeMessage(stream, msg, log) {\n  try {\n    await itPipe.pipe([msg], lp__default[\"default\"].encode(), stream);\n  } catch (err) {\n    log(err);\n  }\n}\n\nexports.Network = Network;\n"},"lineCount":157}},"error":null,"hash":"ed610470d56a452e00ad7c1a41253e5a","cacheData":{"env":{}}}