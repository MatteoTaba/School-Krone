{"id":"../node_modules/it-length-prefixed/src/int32BE-encode.js","dependencies":[{"name":"C:\\Users\\matte\\Documents\\SKR\\package.json","includedInParent":true,"mtime":1638722727563},{"name":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\it-length-prefixed\\package.json","includedInParent":true,"mtime":1638722718113},{"name":"buffer","loc":{"line":3,"column":27},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\it-length-prefixed\\src\\int32BE-encode.js","resolved":"C:\\Users\\matte\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\buffer\\index.js"}],"generated":{"js":"\n'use strict'\n\nconst { Buffer } = require('buffer')\n\n/**\n * @param {number} value\n * @param {Buffer} target\n * @param {number} offset\n */\nconst int32BEEncode = (value, target, offset) => {\n  target = target || Buffer.allocUnsafe(4)\n  target.writeInt32BE(value, offset)\n  return target\n}\n\nint32BEEncode.bytes = 4 // Always because fixed length\n\nmodule.exports = int32BEEncode\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}}],"sources":{"../node_modules/it-length-prefixed/src/int32BE-encode.js":"'use strict'\n\nconst { Buffer } = require('buffer')\n\n/**\n * @param {number} value\n * @param {Buffer} target\n * @param {number} offset\n */\nconst int32BEEncode = (value, target, offset) => {\n  target = target || Buffer.allocUnsafe(4)\n  target.writeInt32BE(value, offset)\n  return target\n}\n\nint32BEEncode.bytes = 4 // Always because fixed length\n\nmodule.exports = int32BEEncode\n"},"lineCount":20}},"error":null,"hash":"b0611df5ac228f6f5bfefba41f8821b8","cacheData":{"env":{}}}