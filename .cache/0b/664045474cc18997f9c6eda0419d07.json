{"id":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","dependencies":[{"name":"C:\\Users\\matte\\Documents\\SKR\\package.json","includedInParent":true,"mtime":1638722727563},{"name":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-interfaces\\package.json","includedInParent":true,"mtime":1638722718468},{"name":"libp2p-crypto/src/random-bytes","loc":{"line":4,"column":28},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-interfaces\\src\\pubsub\\utils.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-interfaces\\node_modules\\libp2p-crypto\\src\\random-bytes.js"},{"name":"uint8arrays/to-string","loc":{"line":5,"column":49},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-interfaces\\src\\pubsub\\utils.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\uint8arrays\\cjs\\src\\to-string.js"},{"name":"uint8arrays/from-string","loc":{"line":6,"column":53},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-interfaces\\src\\pubsub\\utils.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\uint8arrays\\cjs\\src\\from-string.js"},{"name":"peer-id","loc":{"line":7,"column":23},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-interfaces\\src\\pubsub\\utils.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\peer-id\\src\\index.js"},{"name":"multiformats/hashes/sha2","loc":{"line":8,"column":27},"parent":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\libp2p-interfaces\\src\\pubsub\\utils.js","resolved":"C:\\Users\\matte\\Documents\\SKR\\node_modules\\multiformats\\cjs\\src\\hashes\\sha2-browser.js"}],"generated":{"js":"'use strict'\n\n// @ts-ignore libp2p crypto has no types\nconst randomBytes = require('libp2p-crypto/src/random-bytes')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst PeerId = require('peer-id')\nconst { sha256 } = require('multiformats/hashes/sha2')\n\n/**\n * @typedef {import('./message/rpc').RPC.IMessage} IMessage\n * @typedef {import('./message/rpc').RPC.Message} Message\n * @typedef {import('.').InMessage} NormalizedIMessage\n */\n\n/**\n * Generatea random sequence number.\n *\n * @returns {Uint8Array}\n * @private\n */\nconst randomSeqno = () => {\n  return randomBytes(8)\n}\n\n/**\n * Generate a message id, based on the `from` and `seqno`.\n *\n * @param {Uint8Array|string} from\n * @param {Uint8Array} seqno\n * @returns {Uint8Array}\n * @private\n */\nconst msgId = (from, seqno) => {\n  let fromBytes\n\n  if (from instanceof Uint8Array) {\n    fromBytes = PeerId.createFromBytes(from).id\n  } else {\n    fromBytes = PeerId.parse(from).id\n  }\n\n  const msgId = new Uint8Array(fromBytes.length + seqno.length)\n  msgId.set(fromBytes, 0)\n  msgId.set(seqno, fromBytes.length)\n  return msgId\n}\n\n/**\n * Generate a message id, based on message `data`.\n *\n * @param {Uint8Array} data\n * @private\n */\nconst noSignMsgId = (data) => sha256.encode(data)\n\n/**\n * Check if any member of the first set is also a member\n * of the second set.\n *\n * @param {Set<number>|Array<number>} a\n * @param {Set<number>|Array<number>} b\n * @returns {boolean}\n * @private\n */\nconst anyMatch = (a, b) => {\n  let bHas\n  if (Array.isArray(b)) {\n    /**\n     * @param {number} val\n     */\n    bHas = (val) => b.indexOf(val) > -1\n  } else {\n    /**\n     * @param {number} val\n     */\n    bHas = (val) => b.has(val)\n  }\n\n  for (const val of a) {\n    if (bHas(val)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Make everything an array.\n *\n * @template T\n * @param {T|T[]} maybeArray\n * @returns {T[]}\n * @private\n */\nconst ensureArray = (maybeArray) => {\n  if (!Array.isArray(maybeArray)) {\n    return [maybeArray]\n  }\n\n  return maybeArray\n}\n\n/**\n * Ensures `message.from` is base58 encoded\n *\n * @template {{from?:any}} T\n * @param {T & IMessage} message\n * @param {string} [peerId]\n * @returns {NormalizedIMessage}\n */\nconst normalizeInRpcMessage = (message, peerId) => {\n  /** @type {NormalizedIMessage} */\n  // @ts-ignore receivedFrom not yet defined\n  const m = Object.assign({}, message)\n  if (message.from instanceof Uint8Array) {\n    m.from = uint8ArrayToString(message.from, 'base58btc')\n  }\n  if (peerId) {\n    m.receivedFrom = peerId\n  }\n  return m\n}\n\n/**\n * @template {{from?:any, data?:any}} T\n *\n * @param {T & NormalizedIMessage} message\n * @returns {Message}\n */\nconst normalizeOutRpcMessage = (message) => {\n  /** @type {Message} */\n  // @ts-ignore from not yet defined\n  const m = Object.assign({}, message)\n  if (typeof message.from === 'string') {\n    m.from = uint8ArrayFromString(message.from, 'base58btc')\n  }\n  if (typeof message.data === 'string') {\n    m.data = uint8ArrayFromString(message.data)\n  }\n  return m\n}\n\nmodule.exports = {\n  randomSeqno,\n  msgId,\n  noSignMsgId,\n  anyMatch,\n  ensureArray,\n  normalizeInRpcMessage,\n  normalizeOutRpcMessage\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/utils.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}}],"sources":{"../node_modules/libp2p-interfaces/src/pubsub/utils.js":"'use strict'\n\n// @ts-ignore libp2p crypto has no types\nconst randomBytes = require('libp2p-crypto/src/random-bytes')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst PeerId = require('peer-id')\nconst { sha256 } = require('multiformats/hashes/sha2')\n\n/**\n * @typedef {import('./message/rpc').RPC.IMessage} IMessage\n * @typedef {import('./message/rpc').RPC.Message} Message\n * @typedef {import('.').InMessage} NormalizedIMessage\n */\n\n/**\n * Generatea random sequence number.\n *\n * @returns {Uint8Array}\n * @private\n */\nconst randomSeqno = () => {\n  return randomBytes(8)\n}\n\n/**\n * Generate a message id, based on the `from` and `seqno`.\n *\n * @param {Uint8Array|string} from\n * @param {Uint8Array} seqno\n * @returns {Uint8Array}\n * @private\n */\nconst msgId = (from, seqno) => {\n  let fromBytes\n\n  if (from instanceof Uint8Array) {\n    fromBytes = PeerId.createFromBytes(from).id\n  } else {\n    fromBytes = PeerId.parse(from).id\n  }\n\n  const msgId = new Uint8Array(fromBytes.length + seqno.length)\n  msgId.set(fromBytes, 0)\n  msgId.set(seqno, fromBytes.length)\n  return msgId\n}\n\n/**\n * Generate a message id, based on message `data`.\n *\n * @param {Uint8Array} data\n * @private\n */\nconst noSignMsgId = (data) => sha256.encode(data)\n\n/**\n * Check if any member of the first set is also a member\n * of the second set.\n *\n * @param {Set<number>|Array<number>} a\n * @param {Set<number>|Array<number>} b\n * @returns {boolean}\n * @private\n */\nconst anyMatch = (a, b) => {\n  let bHas\n  if (Array.isArray(b)) {\n    /**\n     * @param {number} val\n     */\n    bHas = (val) => b.indexOf(val) > -1\n  } else {\n    /**\n     * @param {number} val\n     */\n    bHas = (val) => b.has(val)\n  }\n\n  for (const val of a) {\n    if (bHas(val)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Make everything an array.\n *\n * @template T\n * @param {T|T[]} maybeArray\n * @returns {T[]}\n * @private\n */\nconst ensureArray = (maybeArray) => {\n  if (!Array.isArray(maybeArray)) {\n    return [maybeArray]\n  }\n\n  return maybeArray\n}\n\n/**\n * Ensures `message.from` is base58 encoded\n *\n * @template {{from?:any}} T\n * @param {T & IMessage} message\n * @param {string} [peerId]\n * @returns {NormalizedIMessage}\n */\nconst normalizeInRpcMessage = (message, peerId) => {\n  /** @type {NormalizedIMessage} */\n  // @ts-ignore receivedFrom not yet defined\n  const m = Object.assign({}, message)\n  if (message.from instanceof Uint8Array) {\n    m.from = uint8ArrayToString(message.from, 'base58btc')\n  }\n  if (peerId) {\n    m.receivedFrom = peerId\n  }\n  return m\n}\n\n/**\n * @template {{from?:any, data?:any}} T\n *\n * @param {T & NormalizedIMessage} message\n * @returns {Message}\n */\nconst normalizeOutRpcMessage = (message) => {\n  /** @type {Message} */\n  // @ts-ignore from not yet defined\n  const m = Object.assign({}, message)\n  if (typeof message.from === 'string') {\n    m.from = uint8ArrayFromString(message.from, 'base58btc')\n  }\n  if (typeof message.data === 'string') {\n    m.data = uint8ArrayFromString(message.data)\n  }\n  return m\n}\n\nmodule.exports = {\n  randomSeqno,\n  msgId,\n  noSignMsgId,\n  anyMatch,\n  ensureArray,\n  normalizeInRpcMessage,\n  normalizeOutRpcMessage\n}\n"},"lineCount":154}},"error":null,"hash":"487dde03d98e31718a932117a0a0de76","cacheData":{"env":{}}}